"""
- 각 자리가 숫자로만 이루어진 문자열 S가 주어졌을 때,
왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 'x' 혹은 '+' 연산자를 넣어
만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하세요.
단, +보다 x를 먼저 계산하는 일반적인 방식과는 달리,
모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정합니다.

- 예를 들어 02984라는 문자열로 만들 수 있는 가장 큰 수는 (((0+2)x9)x8)x4 = 576입니다.
또한 만들어질 수 있는 가장 큰 수는 항상 20억 이하의 정수가 되도록 입력이 주어집니다.
"""


# ex "02984"
# ex "20654"
# 형변환 char 를 int 로 변환 하여 코드 진행
def solution(s):
    result = int(s[0])
    for char in s[1:]:
        num = int(char)
        if result <= 1 or num <= 1:
            result += num
        else:
            result *= num

    return result

# Test cases
print(solution("02984"))  # Output: 576
print(solution("20654"))  # Output: 240

"""
result 에 s 의 첫번째 문자를 int 로 변환하고 저장
for char in s[1:] : char 라는 변수값에 s의 두번째값부터 마지막값까지 넣으면서 반복문 시작
num 에 char 를 int 로 변환하여 저장

result 가 1 이하이거나 num 이 1 이하일 때는 더하기
if result <= 1 or num <= 1:  
    result += num

result 가 1 초과일 때는 곱하기    
else:
    result *= num

# 시간복잡도는 O(n) 이다. (n은 문자열 S의 길이)

# 풀이 : 문자열 S의 각 자리 숫자를 순회하면서, 현재 결과값과 다음 숫자를 비교하여
# 1 이하인 경우에는 더하고, 1 초과인 경우에는 곱하는 방식으로 최대값을 계산한다.
# 이 방식은 0과 1을 처리하는 데 유용하며, 큰 숫자에 대해서는 곱셈이 더 큰 값을 생성한다.
# 이 문제는 그리디 알고리즘의 대표적인 예로, 각 단계에서 최적의 선택을 하여 전체 문제의 최적해를 구하는 방식이다.
"""