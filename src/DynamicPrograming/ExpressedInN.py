"""  * 프로그래머스 다이나믹 프로그래밍 레벨 3 문제 아직 나한텐 좀 어렵다
N으로 표현
제출 내역
문제 설명

아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.

12 = 5 + 5 + (5 / 5) + (5 / 5)
12 = 55 / 5 + 5 / 5
12 = (55 + 5) / 5

5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.
이처럼 숫자 N과 number가 주어질 때,
N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.

제한사항
N은 1 이상 9 이하입니다.
number는 1 이상 32,000 이하입니다.
수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.
최솟값이 8보다 크면 -1을 return 합니다.
입출력 예
N	number	return
5	12	4
2	11	3
입출력 예 설명
예제 #1
문제에 나온 예와 같습니다.

예제 #2
11 = 22 / 2와 같이 2를 3번만 사용하여 표현할 수 있습니다.
"""

def solution(N, number) :
    # N 사용 횟수별로 만들 수 있는 숫자들을 저장할 2차원 리스트 (집합의 리스트)
    # 인덱스 0은 사용하지 않고, 1부터 8까지 사용합니다.
    dp = [set() for _ in range(9)]

    # 1부터 8까지 N의 사용 횟수를 늘려가며 반복
    for i in range(1, 9):
        # N을 i번 이어 붙여서 만든 숫자를 dp[i]에 추가
        dp[i].add(int(str(N) * i))


        # N을 j번 사용한 숫자들과 (i-j)번 사용한 숫자들을 사칙연산
        # i는 N의 총 사용 횟수, j는 첫 번째 피연산자의 N 사용 횟수
        for j in range(1, i):
            for op1 in dp[j]:
                for op2 in dp[i - j]:
                    dp[i].add(op1 + op2)
                    dp[i].add(op1 - op2)
                    dp[i].add(op1 * op2)
                    # 나눗셈은 0으로 나누는 경우를 제외하고 추가
                    if op2 != 0:
                        dp[i].add(op1 // op2)



        # 현재 i번 사용해서 만든 숫자들 중에 number가 있는지 확인
        if number in dp[i]:
            return i

    # N을 8번 사용해도 number를 만들 수 없으면 -1 반환
    return -1

